/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SCRBurnerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "burnSCRForUSDT"
      | "calculateUSDTAmount"
      | "fundUSDTPool"
      | "getCurrentRate"
      | "getSCRBalance"
      | "getUSDTPoolBalance"
      | "owner"
      | "pause"
      | "paused"
      | "rateDenominator"
      | "rateNumerator"
      | "renounceOwnership"
      | "scrToken"
      | "setBurnRate"
      | "transferOwnership"
      | "unpause"
      | "usdtToken"
      | "withdrawUSDT"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BurnRateUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "SCRBurned"
      | "USDTPoolFunded"
      | "USDTWithdrawn"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "burnSCRForUSDT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateUSDTAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundUSDTPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSCRBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUSDTPoolBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rateDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rateNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "scrToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBurnRate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "usdtToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawUSDT",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "burnSCRForUSDT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateUSDTAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundUSDTPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSCRBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUSDTPoolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rateDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "scrToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBurnRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdtToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUSDT",
    data: BytesLike
  ): Result;
}

export namespace BurnRateUpdatedEvent {
  export type InputTuple = [
    oldNumerator: BigNumberish,
    oldDenominator: BigNumberish,
    newNumerator: BigNumberish,
    newDenominator: BigNumberish
  ];
  export type OutputTuple = [
    oldNumerator: bigint,
    oldDenominator: bigint,
    newNumerator: bigint,
    newDenominator: bigint
  ];
  export interface OutputObject {
    oldNumerator: bigint;
    oldDenominator: bigint;
    newNumerator: bigint;
    newDenominator: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SCRBurnedEvent {
  export type InputTuple = [
    user: AddressLike,
    scrAmount: BigNumberish,
    usdtAmount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    scrAmount: bigint,
    usdtAmount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    scrAmount: bigint;
    usdtAmount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace USDTPoolFundedEvent {
  export type InputTuple = [from: AddressLike, amount: BigNumberish];
  export type OutputTuple = [from: string, amount: bigint];
  export interface OutputObject {
    from: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace USDTWithdrawnEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SCRBurner extends BaseContract {
  connect(runner?: ContractRunner | null): SCRBurner;
  waitForDeployment(): Promise<this>;

  interface: SCRBurnerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  burnSCRForUSDT: TypedContractMethod<
    [scrAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  calculateUSDTAmount: TypedContractMethod<
    [scrAmount: BigNumberish],
    [bigint],
    "view"
  >;

  fundUSDTPool: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getCurrentRate: TypedContractMethod<
    [],
    [[bigint, bigint] & { numerator: bigint; denominator: bigint }],
    "view"
  >;

  getSCRBalance: TypedContractMethod<[], [bigint], "view">;

  getUSDTPoolBalance: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  rateDenominator: TypedContractMethod<[], [bigint], "view">;

  rateNumerator: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  scrToken: TypedContractMethod<[], [string], "view">;

  setBurnRate: TypedContractMethod<
    [newNumerator: BigNumberish, newDenominator: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  usdtToken: TypedContractMethod<[], [string], "view">;

  withdrawUSDT: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "burnSCRForUSDT"
  ): TypedContractMethod<[scrAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "calculateUSDTAmount"
  ): TypedContractMethod<[scrAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "fundUSDTPool"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCurrentRate"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { numerator: bigint; denominator: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSCRBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUSDTPoolBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "rateDenominator"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rateNumerator"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "scrToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setBurnRate"
  ): TypedContractMethod<
    [newNumerator: BigNumberish, newDenominator: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdtToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawUSDT"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "BurnRateUpdated"
  ): TypedContractEvent<
    BurnRateUpdatedEvent.InputTuple,
    BurnRateUpdatedEvent.OutputTuple,
    BurnRateUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "SCRBurned"
  ): TypedContractEvent<
    SCRBurnedEvent.InputTuple,
    SCRBurnedEvent.OutputTuple,
    SCRBurnedEvent.OutputObject
  >;
  getEvent(
    key: "USDTPoolFunded"
  ): TypedContractEvent<
    USDTPoolFundedEvent.InputTuple,
    USDTPoolFundedEvent.OutputTuple,
    USDTPoolFundedEvent.OutputObject
  >;
  getEvent(
    key: "USDTWithdrawn"
  ): TypedContractEvent<
    USDTWithdrawnEvent.InputTuple,
    USDTWithdrawnEvent.OutputTuple,
    USDTWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "BurnRateUpdated(uint256,uint256,uint256,uint256)": TypedContractEvent<
      BurnRateUpdatedEvent.InputTuple,
      BurnRateUpdatedEvent.OutputTuple,
      BurnRateUpdatedEvent.OutputObject
    >;
    BurnRateUpdated: TypedContractEvent<
      BurnRateUpdatedEvent.InputTuple,
      BurnRateUpdatedEvent.OutputTuple,
      BurnRateUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "SCRBurned(address,uint256,uint256,uint256)": TypedContractEvent<
      SCRBurnedEvent.InputTuple,
      SCRBurnedEvent.OutputTuple,
      SCRBurnedEvent.OutputObject
    >;
    SCRBurned: TypedContractEvent<
      SCRBurnedEvent.InputTuple,
      SCRBurnedEvent.OutputTuple,
      SCRBurnedEvent.OutputObject
    >;

    "USDTPoolFunded(address,uint256)": TypedContractEvent<
      USDTPoolFundedEvent.InputTuple,
      USDTPoolFundedEvent.OutputTuple,
      USDTPoolFundedEvent.OutputObject
    >;
    USDTPoolFunded: TypedContractEvent<
      USDTPoolFundedEvent.InputTuple,
      USDTPoolFundedEvent.OutputTuple,
      USDTPoolFundedEvent.OutputObject
    >;

    "USDTWithdrawn(address,uint256)": TypedContractEvent<
      USDTWithdrawnEvent.InputTuple,
      USDTWithdrawnEvent.OutputTuple,
      USDTWithdrawnEvent.OutputObject
    >;
    USDTWithdrawn: TypedContractEvent<
      USDTWithdrawnEvent.InputTuple,
      USDTWithdrawnEvent.OutputTuple,
      USDTWithdrawnEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
